- TreeWrapper
- special matchers for code size and complexity
- all definitions (class, method, variable/field, should create a "matching table") especially when calling methods of external types


----------------
TODO
- ArrayTypeTree
- TypeParameterTree
- WildcardTree
- handle inner types
- handle pattern type assignments - like with variables
- handle method invocations of pattern types
- EmptySwitchStatements -> switch without code
- UnnecessaryConversionTemporary -> have an annotation to say primitive type whenever i but "int"
- match on literals with regex
- easier to have both <,> someExpressionUsing(x, op, y)
- implement MissingInterface
- implement SomeTypeImplementing<X,...>
- implement SomeTypeExtending<X,...>
- @PossibleTypes(t1,t2 ...)
- handle cases when I have  {someExpressionUsing(abc); return ...} to make sure i match also on return abc;
- replace @Override to actually check if the method overrides something in MethodMatcher
- o instanceof SomeTypeIncompatibleWith<EqualsCheckForOperandNotCompatibleWithThis>
- someStringLiteralContaining
- match on execution paths - make sure a pattern exists on all different exit paths
- order of fields and blocks is important!